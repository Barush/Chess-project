/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package draft.swingui;

/**
 * Class which implements GUI of the menu - swing generated
 * 
 * @author xserec00@stud.fit.vutbr.cz
 *         xskriv01@stud.fit.vutbr.cz
 */
import draft.gamemode.*;
import draft.network.Connection;
import java.awt.EventQueue;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class MenuUI extends javax.swing.JFrame {

    /**
     * Creates new form MenuUI
     */
    public MenuUI() {
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        PvP = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        PvC = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        Net = new javax.swing.JMenu();
        NetCreate = new javax.swing.JMenuItem();
        NetConnect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        LoadPvP = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        LoadPvC = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        LoadNetwork = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu5 = new javax.swing.JMenu();
        ReplayMode = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Help = new javax.swing.JMenuItem();
        Creators = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jMenu1.setText("Game");

        PvP.setText("New Player vs Player");
        PvP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PvPActionPerformed(evt);
            }
        });
        jMenu1.add(PvP);

        jMenu3.setText("New Player vs Computer");

        PvC.setText("White");
        PvC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PvCActionPerformed(evt);
            }
        });
        jMenu3.add(PvC);

        jMenuItem1.setText("Black");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenu1.add(jMenu3);

        Net.setText("New Network Game");

        NetCreate.setText("Create");
        NetCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetCreateActionPerformed(evt);
            }
        });
        Net.add(NetCreate);

        NetConnect.setText("Connect");
        NetConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetConnectActionPerformed(evt);
            }
        });
        Net.add(NetConnect);

        jMenu1.add(Net);
        jMenu1.add(jSeparator1);

        LoadPvP.setText("Load Player vs Player");
        LoadPvP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadPvPActionPerformed(evt);
            }
        });
        jMenu1.add(LoadPvP);

        jMenu4.setText("Load Player vs Computer");

        LoadPvC.setText("White");
        LoadPvC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadPvCActionPerformed(evt);
            }
        });
        jMenu4.add(LoadPvC);

        jMenuItem2.setText("Black");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenu1.add(jMenu4);

        LoadNetwork.setText("Load Network Game");
        LoadNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadNetworkActionPerformed(evt);
            }
        });
        jMenu1.add(LoadNetwork);
        jMenu1.add(jSeparator2);

        jMenu5.setText("Replay Mode");

        ReplayMode.setText("From .xml");
        ReplayMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplayModeActionPerformed(evt);
            }
        });
        jMenu5.add(ReplayMode);

        jMenuItem3.setText("From Notation");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenu1.add(jMenu5);
        jMenu1.add(jSeparator3);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        jMenu2.add(Help);

        Creators.setText("Creators");
        Creators.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatorsActionPerformed(evt);
            }
        });
        jMenu2.add(Creators);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PvCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PvCActionPerformed
        Computer game = new Computer(1);
        game.setVisible(true);
    }//GEN-LAST:event_PvCActionPerformed

    private void PvPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PvPActionPerformed
        Player game = new Player();
        game.setVisible(true);
    }//GEN-LAST:event_PvPActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void LoadPvPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadPvPActionPerformed
        // TODO add your handling code here:
        LoadGame load = new LoadGame();
        //load.getRecord();
        Player game = new Player(load.getRecord());
        game.setVisible(true);
        
    }//GEN-LAST:event_LoadPvPActionPerformed

    private void NetConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetConnectActionPerformed
        Random randnumber = new Random();
        String ip = ""; 
        List<String> IPaddresses = new ArrayList<String>();
        
        int rand = randnumber.nextInt(65555);
        if(rand < 1024){    
            rand += 1024;
        }
        
        //generovani ip adres vsech rozhrani
        try {
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            while (interfaces.hasMoreElements()) {
                NetworkInterface iface = interfaces.nextElement();
                // filters out 127.0.0.1 and inactive interfaces
                if (iface.isLoopback() || !iface.isUp())
                    continue;
                Enumeration<InetAddress> addresses = iface.getInetAddresses();
                while(addresses.hasMoreElements()) {
                    InetAddress addr = addresses.nextElement();
                    ip = addr.getHostAddress();
                    IPaddresses.add(iface.getDisplayName() + " " + ip);
                }
            }
        } catch (SocketException e) {
            throw new RuntimeException(e);
        }
        
        //pridani verejne ip adresy do seznamu
        URL whatismyip = null;
        try {
            whatismyip = new URL("http://checkip.amazonaws.com");
        } catch (MalformedURLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(
                    whatismyip.openStream()));
            ip = in.readLine();
        } catch (IOException ex){
            Logger.getLogger(Network.class.getName()).log(Level.SEVERE, null, ex);
        }   
        IPaddresses.add("Public IP address " + ip);
        
        // Create Connection vefore show the message.
        Connection conn = new Connection("conn", rand);
        conn.start();
        JOptionPane.showInputDialog(this, "Your port is: " + rand + "\nYour IP is:", "Connect to the game", 3, null, IPaddresses.toArray(), null);
        
    }//GEN-LAST:event_NetConnectActionPerformed

    private void NetCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetCreateActionPerformed
        String address = JOptionPane.showInputDialog(this, "Write IP adress of the second player.", "Creating a network game", 3);
        if(address == null){ return;}
        String port = JOptionPane.showInputDialog(this, "Write port of the second player.", "Creating a network game", 3);
        if(port == null){ return;}
        String[] selection = {"Black", "White"};
        Object color = JOptionPane.showInputDialog(this, "Select your color.", "Creating a network game", 3, null, selection, rootPaneCheckingEnabled);
        if(color == null){ return;}
        try{
            Network game = new Network(address, Integer.parseInt(port), color, true);
            game.setVisible(true);
        }
        catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Connection to the port failed.", "Connection error", 0);
        }
    }//GEN-LAST:event_NetCreateActionPerformed

    private void LoadPvCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadPvCActionPerformed
        // TODO add your handling code here:
        LoadGame load = new LoadGame();
        //load.getRecord();
        Computer game = new Computer(load.getRecord(),1);
        game.setVisible(true);
    }//GEN-LAST:event_LoadPvCActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Computer game = new Computer(0);
        game.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        LoadGame load = new LoadGame();
        //load.getRecord();
        Computer game = new Computer(load.getRecord(),0);
        game.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(new Runnable() {
                                    public void run(){
                                        LoadGame load = new LoadGame(1);
                                        new Replay(load.getRecord());
                                    }});
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void ReplayModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplayModeActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(new Runnable() {
                                    public void run(){
                                        LoadGame load = new LoadGame();
                                        new Replay(load.getRecord());
                                    }});
    }//GEN-LAST:event_ReplayModeActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
         String howto = "Hra Dama.\nLze hrat ve trech variantach - single player,"
                + "multiplayer na jednom pocitaci a multiplayer po siti.\n\n"
                + "Pri hre jednoho hrace hraje hrac proti umele inteligenci na "
                + "pocitaci.\nTuto hru hrac vytvori kliknutim na New Game Player vs."
                + "Computer.\n\n"
                + "Pri hre dvou hracu na jednom pocitaci je vytvorena jedna hraci plocha,"
                + "v niz se \nstridaji dva hraci ovladajici kazdy svoje figurky pomoci mysi.\n"
                + "Stridani tahu si zajistuji hraci sami.\n\n"
                + "Hra dvou hracu po siti probiha nasledovne: jeden hrac vytvori hru,\n"
                + "do okenka vyzvy zada IP adresu a port druheho hrace, ktere on"
                 + " si \nzobrazi na obrazovce pomoci New Network Game > Connect.";
        JOptionPane.showMessageDialog(this, howto, "How to play", 0x1);
    }//GEN-LAST:event_HelpActionPerformed

    private void CreatorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatorsActionPerformed
                String about = "Hra Dama.\n\nAutori: \nBarbora Skrivankova, xskriv01@stud.fit"
                + ".vutbr.cz\nViliam Serecun, xserec00@stud.fit.vutbr.cz.\n\n"
                + "Vytvoreno jako projekt do predmetu IJA.\n duben 2013";
        JOptionPane.showMessageDialog(this, about, "About game", 0x1);
    }//GEN-LAST:event_CreatorsActionPerformed

    private void LoadNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadNetworkActionPerformed
        // TODO add your handling code here:
        LoadGame load = new LoadGame();
        //load.getRecord();
        //Network game = new Network(load.getRecord(),0);
        String address = JOptionPane.showInputDialog(this, "Write IP adress of the second player.", "Creating a network game", 3);
        if(address == null){ return;}
        String port = JOptionPane.showInputDialog(this, "Write port of the second player.", "Creating a network game", 3);
        if(port == null){ return;}
        String[] selection = {"Black", "White"};
        Object color = JOptionPane.showInputDialog(this, "Select your color.", "Creating a network game", 3, null, selection, rootPaneCheckingEnabled);
        if(color == null){ return;}
        try{
            Network game = new Network(address, Integer.parseInt(port), color, load.getNotation(load.getRecord()));
            game.setVisible(true);
        }
        catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Connection to the port failed.", "Connection error", 0);
        }
    }//GEN-LAST:event_LoadNetworkActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Creators;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Help;
    private javax.swing.JMenuItem LoadNetwork;
    private javax.swing.JMenuItem LoadPvC;
    private javax.swing.JMenuItem LoadPvP;
    private javax.swing.JMenu Net;
    private javax.swing.JMenuItem NetConnect;
    private javax.swing.JMenuItem NetCreate;
    private javax.swing.JMenuItem PvC;
    private javax.swing.JMenuItem PvP;
    private javax.swing.JMenuItem ReplayMode;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
